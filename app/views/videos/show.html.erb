<p id="notice"><%= notice %></p>

<div class="row">
	<div class="col m3">
      <div class="collection">
      	<% @videos.each do |video| %>
      		<%= link_to video.title, video, :class => 'collection-item' %>
      	<% end %>
      </div>
	</div>

	<div class="col m9">
		<div class="card indigo darken-2 z-depth-2">
			<div class="card-image">
				<div id="player"></div>
			</div>

			<div class="card-content white-text">
				<button class = "btn btn-primary" onclick = "setPlaySpeed(0.75)" >0.75x</button>
				<button class = "btn btn-primary" onclick = "setPlaySpeed(1)" >1x</button>
				<button class = "btn btn-primary" onclick = "setPlaySpeed(1.25)" >1.25x</button>
				<button class = "btn btn-primary" onclick = "setPlaySpeed(1.5)" >1.5x</button>
				<button class = "btn btn-primary" onclick = "setPlaySpeed(2)" >2x</button>
				<br>
				<span class="card-title"><%= @video.title %></span>
				<p><%= @video.description %></p>
			</div>
			
			<div class="card-action">
				<%= link_to "Previous", @prev_video if !@prev_video.nil? %>
				<span class = "right">
					<%= link_to "Next", @next_video if !@next_video.nil? %>
				</span>
			</div>
		</div>
	</div>
</div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
			width: '100%',
          videoId: '<%= @video.wistia %>',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // This is my own code, based on the code for Wistia in Leo's tutorial
      function setPlaySpeed(speed){
      	player.setPlaybackRate(speed);
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 6000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>